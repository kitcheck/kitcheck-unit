#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.6.0
# from Racc grammar file "".
#

require 'racc/parser.rb'

  require_relative 'lexer'

module Unit
  class Parser < Racc::Parser

module_eval(<<'...end parser_definition.y/module_eval...', 'parser_definition.y', 75)
  def parse(input)
    #Takes the results from the lexer's tokenize method and returns stuff
    @tokens = input
    do_parse
  end

  def next_token
    @tokens.shift
  end
...end parser_definition.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    33,    34,    35,    36,    37,    38,    40,    39,    32,    41,
    48,    47,    44,    46,    51,    25,    54,    50,    53,    54,
    54,    56,    58,    34,    35,    26,    27,    28,    29,    30,
    31,    42,    59,    60,    61,    35,    34,    62,    63,    64,
    65 ]

racc_action_check = [
    25,    25,    25,    25,    25,    25,    25,    25,    25,    25,
    27,    27,    27,    27,    28,     0,    29,    28,    29,    30,
    31,    30,    31,    48,    48,     1,    16,    17,    19,    20,
    22,    26,    32,    41,    47,    51,    54,    59,    61,    62,
    64 ]

racc_action_pointer = [
    13,    25,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    15,    16,   nil,    17,
    18,   nil,    19,   nil,   nil,    -3,    31,     8,    12,    14,
    17,    18,    30,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    31,   nil,   nil,   nil,   nil,   nil,    23,    19,   nil,
   nil,    30,   nil,   nil,    32,   nil,   nil,   nil,   nil,    34,
   nil,    33,    28,   nil,    36,   nil ]

racc_action_default = [
   -47,   -47,    -1,    -2,    -3,    -4,    -5,    -6,    -7,    -8,
    -9,   -10,   -11,   -12,   -13,   -14,   -15,   -16,   -17,   -18,
   -19,   -20,   -21,   -22,   -23,   -47,   -47,   -47,   -47,   -47,
   -47,   -47,   -47,   -38,   -39,   -40,   -41,   -42,   -43,   -44,
   -45,   -47,    66,   -24,   -25,   -33,   -34,   -47,   -47,   -35,
   -36,   -47,   -27,   -28,   -47,   -31,   -32,   -29,   -30,   -47,
   -46,   -47,   -47,   -37,   -47,   -26 ]

racc_goto_table = [
    17,     1,     2,     3,     4,    18,     5,     6,     7,     8,
     9,    10,    11,    12,    13,    14,    15,    16,    19,    20,
    21,    22,    23,    24,   nil,   nil,   nil,    43,   nil,    52,
    55,    57,    45,    49 ]

racc_goto_check = [
    17,     1,     2,     3,     4,    18,     5,     6,     7,     8,
     9,    10,    11,    12,    13,    14,    15,    16,    19,    20,
    21,    22,    23,    24,   nil,   nil,   nil,    17,   nil,    17,
    17,    17,    18,    18 ]

racc_goto_pointer = [
   nil,     1,     2,     3,     4,     6,     7,     8,     9,    10,
    11,    12,    13,    14,    15,    16,    17,     0,     5,    18,
    19,    20,    21,    22,    23 ]

racc_goto_default = [
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 14, :_reduce_none,
  1, 14, :_reduce_none,
  1, 14, :_reduce_none,
  1, 14, :_reduce_none,
  1, 14, :_reduce_none,
  1, 14, :_reduce_none,
  1, 14, :_reduce_none,
  1, 14, :_reduce_none,
  1, 14, :_reduce_none,
  1, 14, :_reduce_none,
  1, 14, :_reduce_none,
  1, 14, :_reduce_none,
  1, 14, :_reduce_none,
  1, 14, :_reduce_none,
  1, 14, :_reduce_none,
  1, 14, :_reduce_none,
  1, 14, :_reduce_none,
  1, 14, :_reduce_none,
  1, 14, :_reduce_none,
  1, 14, :_reduce_none,
  1, 14, :_reduce_none,
  1, 14, :_reduce_none,
  1, 14, :_reduce_none,
  3, 15, :_reduce_24,
  3, 16, :_reduce_25,
  6, 28, :_reduce_26,
  3, 17, :_reduce_27,
  3, 18, :_reduce_28,
  3, 26, :_reduce_29,
  3, 27, :_reduce_30,
  3, 19, :_reduce_31,
  3, 20, :_reduce_32,
  3, 21, :_reduce_33,
  3, 22, :_reduce_34,
  3, 23, :_reduce_35,
  3, 24, :_reduce_36,
  5, 25, :_reduce_37,
  2, 29, :_reduce_38,
  2, 30, :_reduce_39,
  2, 31, :_reduce_40,
  2, 34, :_reduce_41,
  2, 32, :_reduce_42,
  2, 33, :_reduce_43,
  2, 36, :_reduce_44,
  2, 35, :_reduce_45,
  3, 37, :_reduce_46 ]

racc_reduce_n = 47

racc_shift_n = 66

racc_token_table = {
  false => 0,
  :error => 1,
  :SCALAR => 2,
  :MASS_UOM => 3,
  :VOLUME_UOM => 4,
  :TIME_UOM => 5,
  :PATCH_UOM => 6,
  :UNIT_UOM => 7,
  :UNITLESS_UOM => 8,
  :EQUIVALENCE_UOM => 9,
  :PERCENT => 10,
  :SLASH => 11,
  :COLON => 12 }

racc_nt_base = 13

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "SCALAR",
  "MASS_UOM",
  "VOLUME_UOM",
  "TIME_UOM",
  "PATCH_UOM",
  "UNIT_UOM",
  "UNITLESS_UOM",
  "EQUIVALENCE_UOM",
  "PERCENT",
  "SLASH",
  "COLON",
  "$start",
  "valid_unit",
  "concentration",
  "concentration_no_denom_scalar",
  "unit_concentration",
  "unit_concentration_no_denom_scalar",
  "unit_less_concentration",
  "unit_less_concentration_no_denom_scalar",
  "rate",
  "rate_no_denom_scalar",
  "volume_rate",
  "volume_rate_no_denom_scalar",
  "dosage_rate_no_denom_scalar",
  "equivalence_concentration",
  "equivalence_concentration_no_denom_scalar",
  "rational_concentration",
  "mass",
  "volume",
  "time",
  "unit",
  "unitless",
  "patch",
  "equivalence",
  "percent",
  "solution" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

# reduce 2 omitted

# reduce 3 omitted

# reduce 4 omitted

# reduce 5 omitted

# reduce 6 omitted

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

# reduce 15 omitted

# reduce 16 omitted

# reduce 17 omitted

# reduce 18 omitted

# reduce 19 omitted

# reduce 20 omitted

# reduce 21 omitted

# reduce 22 omitted

# reduce 23 omitted

module_eval(<<'.,.,', 'parser_definition.y', 28)
  def _reduce_24(val, _values, result)
     return Concentration.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser_definition.y', 29)
  def _reduce_25(val, _values, result)
     return Concentration.new(val[0], Volume.new(1, val[2]))
    result
  end
.,.,

module_eval(<<'.,.,', 'parser_definition.y', 30)
  def _reduce_26(val, _values, result)
     return Concentration.new(Mass.new(val[0], val[3]), Volume.new(val[2], val[5]))
    result
  end
.,.,

module_eval(<<'.,.,', 'parser_definition.y', 32)
  def _reduce_27(val, _values, result)
     return Concentration.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser_definition.y', 33)
  def _reduce_28(val, _values, result)
     return Concentration.new(val[0], Volume.new(1, val[2]))
    result
  end
.,.,

module_eval(<<'.,.,', 'parser_definition.y', 35)
  def _reduce_29(val, _values, result)
     return Concentration.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser_definition.y', 36)
  def _reduce_30(val, _values, result)
     return Concentration.new(val[0], Volume.new(1, val[2]))
    result
  end
.,.,

module_eval(<<'.,.,', 'parser_definition.y', 38)
  def _reduce_31(val, _values, result)
     return Concentration.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser_definition.y', 39)
  def _reduce_32(val, _values, result)
     return Concentration.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser_definition.y', 41)
  def _reduce_33(val, _values, result)
     return Rate.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser_definition.y', 42)
  def _reduce_34(val, _values, result)
     return Rate.new(val[0], Time.new(1, val[2]))
    result
  end
.,.,

module_eval(<<'.,.,', 'parser_definition.y', 44)
  def _reduce_35(val, _values, result)
     return Rate.new(val[0], val[2])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser_definition.y', 45)
  def _reduce_36(val, _values, result)
     return Rate.new(val[0], Time.new(1, val[2]))
    result
  end
.,.,

module_eval(<<'.,.,', 'parser_definition.y', 47)
  def _reduce_37(val, _values, result)
     return Rate.new(val[0], Time.new(1, val[4]))
    result
  end
.,.,

module_eval(<<'.,.,', 'parser_definition.y', 49)
  def _reduce_38(val, _values, result)
     return Mass.new(val[0], val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser_definition.y', 51)
  def _reduce_39(val, _values, result)
     return Volume.new(val[0], val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser_definition.y', 53)
  def _reduce_40(val, _values, result)
     return Time.new(val[0], val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser_definition.y', 55)
  def _reduce_41(val, _values, result)
     return Unit.new(val[0], 'patch')
    result
  end
.,.,

module_eval(<<'.,.,', 'parser_definition.y', 57)
  def _reduce_42(val, _values, result)
     return Unit.new(val[0], 'unit')
    result
  end
.,.,

module_eval(<<'.,.,', 'parser_definition.y', 59)
  def _reduce_43(val, _values, result)
     return Unit.new(val[0], val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser_definition.y', 61)
  def _reduce_44(val, _values, result)
     return Concentration.new(Mass.new(val[0] * 10, 'mg'), Volume.new(1, 'ml'))
    result
  end
.,.,

module_eval(<<'.,.,', 'parser_definition.y', 63)
  def _reduce_45(val, _values, result)
     return Equivalence.new(val[0], val[1])
    result
  end
.,.,

module_eval(<<'.,.,', 'parser_definition.y', 65)
  def _reduce_46(val, _values, result)
     return Concentration.new(Mass.new(val[0] * 1000, 'mg'), Volume.new(val[2], 'ml'))
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

  end   # class Parser
end   # module Unit
